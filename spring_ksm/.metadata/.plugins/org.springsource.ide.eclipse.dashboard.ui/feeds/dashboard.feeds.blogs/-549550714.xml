<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 29 Sep 2025 00:36:54 GMT</lastBuildDate><item><title><![CDATA[A Bootiful Podcast: Spring Batch lead Mahmoud Ben Hassine]]></title><link>https://spring.io/blog/2025/09/25/a-bootiful-podcast-mahmoud-ben-hassine</link><guid isPermaLink="true">https://spring.io/blog/2025/09/25/a-bootiful-podcast-mahmoud-ben-hassine</guid><dc:creator><![CDATA[joshlong]]></dc:creator><pubDate>Thu, 25 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! In this installment we talk to the legendary lead of the Spring Batch project, Mahmoud Ben Hassine, about the latest-and-greatest in Spring Batch in the Spring Boot 4 generation.&lt;/p&gt;
&lt;iframe title=&quot;Spring Batch lead Mahmoud Ben Hassine&quot; allowtransparency=&quot;true&quot; height=&quot;300&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);height:300px;&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?from=embed&amp;i=gvj7h-1976992-pb&amp;square=1&amp;share=1&amp;download=1&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;rtl=0&amp;logo_link=&amp;btn-skin=7&amp;size=300&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - September 23rd, 2025 ]]></title><link>https://spring.io/blog/2025/09/23/this-week-in-spring-september-23rd-2025</link><guid isPermaLink="true">https://spring.io/blog/2025/09/23/this-week-in-spring-september-23rd-2025</guid><dc:creator><![CDATA[joshlong]]></dc:creator><pubDate>Tue, 23 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! I&apos;m preparing my talks for several amazing shows  including: &lt;em&gt;Commit Your Code&lt;/em&gt; conference in Plano, Texas (starting tomorrow); &lt;em&gt;Dev2Next&lt;/em&gt; in Colorado; Devoxx Belgium in Antwerp, Belgium; and CloudFoundry Days in Germany. So much good stuff comin&apos; up! And so much good stuff in the community this week, as well, so let&apos;s dive right into it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I love this! One of my favorite new features in Spring Framework 7 is &lt;a href=&quot;https://spring.io/blog/2025/09/23/http-service-client-enhancements&quot;&gt;the new HTTP Service Clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;there&apos;s so much good stuff coming in &lt;a href=&quot;https://spring.io/blog/2025/09/19/spring-ai-1-1-0-M2-mcp-focused&quot;&gt;Spring AI 1.0.2 and improved MCP support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/19/spring-modulith-2-0-m3-released&quot;&gt;Spring Modulith 2.0 M3 released&lt;/a&gt;. This new release includes updated event publication repository implementations for JPA, Jackson 3 support, and so much more.&lt;/li&gt;
&lt;li&gt;in last week&apos;s installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I talked to the amazing &lt;a href=&quot;https://spring.io/blog/2025/09/18/a-bootiful-podcast-spencer-gibb&quot;&gt;Spring Cloud lead Spencer Gibb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/18/spring-boot-3-4-10-available-now&quot;&gt;Spring Boot 3.4.10 is available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/18/spring-boot-3-5-6-available-now&quot;&gt;Spring Boot 3.5.6 available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/18/spring-boot-4-0-0-M3-available-now&quot;&gt;Spring Boot 4.0.0 M3 available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/17/spring-ai-1-0-2-available-now&quot;&gt;Spring AI 1.0.2 is available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/17/spring-batch-6-0-0-m3-5-2-3-released&quot;&gt;Spring Batch 6.0.0 M3 and 5.2.3 are out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/17/spring-integration-7-0-M3-released&quot;&gt;Spring Integration 7.0 M3 is available now!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2025/09/17/spring-kafka-4&quot;&gt;Spring for Apache Kafka 4.0.0-M5 is Available Now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;this is a nice introduction to streaming &lt;a href=&quot;https://www.baeldung.com/spring-streaming-multipart-data&quot;&gt;multipart data in a Spring web application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;did you catch the latest &lt;a href=&quot;https://www.infoq.com/news/2025/09/spring-news-roundup-sep15-2025/&quot;&gt;Spring roundup over at InfoQ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;yet another interesting approach on implementing a &lt;a href=&quot;https://www.baeldung.com/spring-spel-implement-simple-rule-engine&quot;&gt;simple rules engine using Java (and Spring)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I also loved that they have this &lt;a href=&quot;https://www.baeldung.com/spring-integration-test-optimize&quot;&gt;nice article on optimizing integration tests with Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;it took a &lt;em&gt;huge&lt;/em&gt; amount of work, but we managed to reunite Spring cofounders &lt;strong&gt;Rod Johnson&lt;/strong&gt; and &lt;strong&gt;Juergen Hoeller&lt;/strong&gt; for this session at &lt;a href=&quot;https://www.youtube.com/watch?v=i_fiHmg1qM0&quot;&gt;Spring I/O 2025. Amazing discussion. Don&apos;t miss it&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;this is super interesting! Charles Nutter, the lead of JRuby - a blazing fast implementation of Ruby on top of the JVM - previews what it looks like to get a Spring Boot application running on top of JRuby! &lt;a href=&quot;https://x.com/headius/status/1968187803545616594&quot;&gt;&lt;strong&gt;Awesome&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[HTTP Service Client Enhancements]]></title><link>https://spring.io/blog/2025/09/23/http-service-client-enhancements</link><guid isPermaLink="true">https://spring.io/blog/2025/09/23/http-service-client-enhancements</guid><dc:creator><![CDATA[rstoyanchev]]></dc:creator><pubDate>Tue, 23 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In this 3rd blog post of the &lt;a href=&quot;https://spring.io/blog/2025/09/02/road_to_ga_introduction&quot;&gt;Road to GA&lt;/a&gt; series that’s highlighting major features within the Spring portfolio for &lt;a href=&quot;https://spring.io/blog/2024/10/01/from-spring-framework-6-2-to-7-0&quot;&gt;the next major versions to be released in November&lt;/a&gt; we’ll have a look at new features for HTTP service clients, which are a collaborative effort across several Spring projects.&lt;/p&gt;
&lt;h1 id=&quot;introduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introduction&quot; aria-label=&quot;introduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Spring Framework 6 introduced the ability to define an HTTP service through a Java interface with &lt;code&gt;@HttpExchange&lt;/code&gt;-annotated methods. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface MilestoneService {

    @GetExchange(&quot;/repos/{org}/{repo}/milestones&quot;)
    List&amp;#x3C;Milestone&gt; getMilestones(@PathVariable String org, @PathVariable String repo);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the client side, you can have a proxy generated from the interface to perform HTTP requests as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Initialize HTTP client
RestClient restClient = RestClient.create(&quot;https://api.github.com&quot;);

// Create factory for client proxies
HttpServiceProxyFactory proxyFactory = HttpServiceProxyFactory.builder()
        .exchangeAdapter(RestClientAdapter.create(restClient))
        .build();

// Create client proxy
MilestoneService client = proxyFactory.createClient(MilestoneService.class);

// Use proxy for HTTP requests
List&amp;#x3C;Milestone&gt; milestones = client.getMilestones(“spring-projects”, “spring-framework”);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the server side, an &lt;code&gt;@Controller&lt;/code&gt; class can implement the same interface to handle requests, if the HTTP service is yours.&lt;/p&gt;
&lt;p&gt;HTTP service client support is powerful, expressive, and easy to use. It allows one team to own the knowledge of how a REST API works, what parts are relevant to a client application, what input and output types to create, what endpoint method signatures are needed, what javadoc to have, and so on. The resulting Java API guides developers and is ready to use.&lt;/p&gt;
&lt;p&gt;These patterns, long used with Spring Cloud OpenFeign, have become available to all Spring Framework 6+ applications to use with &lt;code&gt;RestClient&lt;/code&gt;, &lt;code&gt;RestTemplate&lt;/code&gt;, or &lt;code&gt;WebClient&lt;/code&gt;. The HTTP service client support went through plenty of feedback-driven evolution in the 6.x timeline, but one major challenge remained.&lt;/p&gt;
&lt;h1 id=&quot;configuration-overhead&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#configuration-overhead&quot; aria-label=&quot;configuration overhead permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuration Overhead&lt;/h1&gt;
&lt;p&gt;It’s trivial to create an &lt;code&gt;HttpServiceProxyFactory&lt;/code&gt;, and use it to create a client proxy, or two, or three, but as the number grows, this becomes repetitive and cumbersome especially since client proxies are typically declared as Spring beans. Consider for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean
MilestoneService milestoneService(HttpServiceProxyFactory factory) {
    return factory.createClient(MilestoneService.class);
}

@Bean
ReleaseService releaseService(HttpServiceProxyFactory factory) {
    return factory.createClient(ReleaseService.class);
}

// More client beans

@Bean
HttpServiceProxyFactory proxyFactory(RestClient.Builder clientBuilder) {
    RestClient client = clientBuilder.baseUrl(&quot;https://api.github.com&quot;).build();
    return HttpServiceProxyFactory.builderFor(RestClientAdapter.create(client)).build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;REST APIs expose many fine-grained endpoints. The GitHub API has tens, if not hundreds, and while you certainly don’t need all, it’s easy to end up with at least a dozen or more depending on the actual need.&lt;/p&gt;
&lt;p&gt;Furthermore, it’s common to integrate with multiple REST APIs, which means even more interfaces as well as higher complexity to configure underlying HTTP clients.&lt;/p&gt;
&lt;h1 id=&quot;http-service-registry&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-service-registry&quot; aria-label=&quot;http service registry permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP Service Registry&lt;/h1&gt;
&lt;p&gt;To address this challenge, &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/7.0-SNAPSHOT/integration/rest-clients.html#rest-http-service-client-group-config&quot;&gt;Spring Framework 7&lt;/a&gt; introduces an additional registry layer over the &lt;code&gt;HttpServiceProxyFactory&lt;/code&gt; that provides the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configuration model to register HTTP interfaces and initialize HTTP client infrastructure&lt;/li&gt;
&lt;li&gt;transparent creation and registration of client proxies as Spring beans&lt;/li&gt;
&lt;li&gt;access to all client proxies via &lt;code&gt;HttpServiceProxyRegistry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the configuration model, HTTP services are organized by group where a group is just a set of HTTP services that share the same HTTP client configuration, and the resulting client instance.&lt;/p&gt;
&lt;p&gt;Currently, there are two ways to declare HTTP services.&lt;/p&gt;
&lt;h2 id=&quot;declarative-registration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#declarative-registration&quot; aria-label=&quot;declarative registration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Declarative Registration&lt;/h2&gt;
&lt;p&gt;One way to declare the HTTP service groups is through the &lt;code&gt;@ImportHttpServices&lt;/code&gt; annotation (new in Spring Framework 7).&lt;/p&gt;
&lt;p&gt;You can use it to manually list HTTP services by group:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@ImportHttpServices(group = &quot;github&quot;, types = {MilestoneService.class, … })
@ImportHttpServices(group = &quot;stackoverflow&quot;, types = {QuestionService.class, … })
@Configuration
public class DemoConfig {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or have them detected under a base package:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@ImportHttpServices(group = &quot;github&quot;, basePackages = “&quot;client.github&quot;)
@ImportHttpServices(group = &quot;stackoverflow&quot;, basePackages = “client.stackoverflow”)
@Configuration
public class DemoConfig {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An HTTP service group is configured with &lt;code&gt;RestClient&lt;/code&gt; by default, but you can switch to &lt;code&gt;WebClient&lt;/code&gt; through the &lt;code&gt;clientType&lt;/code&gt; attribute of the annotation.&lt;/p&gt;
&lt;h2 id=&quot;programmatic-registration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#programmatic-registration&quot; aria-label=&quot;programmatic registration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Programmatic Registration&lt;/h2&gt;
&lt;p&gt;If you need more control over filtering or other registration logic, you can also declare HTTP services programmatically in two steps.&lt;/p&gt;
&lt;p&gt;First, create a registrar that declares the HTTP service groups:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class CustomHttpServiceRegistrar extends AbstractHttpServiceRegistrar { 

    @Override
    protected void registerHttpServices(GroupRegistry registry, AnnotationMetadata metadata) {
        registry.forGroup(&quot;github&quot;).detectInBasePackages(“client.github);
        // more registrations…
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then import the registrar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration
@Import(CustomHttpServiceRegistrar.class) 
public class ClientConfig {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that both the declarative and the programmatic registration rely on &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/7.0.0-SNAPSHOT/javadoc-api/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.html&quot;&gt;ImportBeanDefinitionRegistrar&lt;/a&gt;, which hooks in very early in the Spring configuration lifecycle, at the bean definition level. This makes client proxy beans available for dependency injection and helps to avoid lifecycle issues.&lt;/p&gt;
&lt;h2 id=&quot;http-client-initialization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-client-initialization&quot; aria-label=&quot;http client initialization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP Client Initialization&lt;/h2&gt;
&lt;p&gt;Once HTTP services groups have been declared, what remains is to configure the HTTP client for each group. You can use an &lt;code&gt;HttpServiceGroupConfigurer&lt;/code&gt; bean method for that. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean
RestClientHttpServiceGroupConfigurer groupConfigurer() {
    return groups -&gt; {

        groups.filterByName(&quot;github&quot;).forEachClient((_, builder) -&gt;
                builder.baseUrl(&quot;https://api.github.com&quot;));

        groups.filterByName(&quot;stackoverflow&quot;).forEachClient((_, builder) -&gt;
                builder.baseUrl(&quot;https://api.stackexchange.com?site=stackoverflow&quot;));
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can have as many HTTP service group configurers as necessary, and those can be application or framework owned.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://docs.spring.io/spring-boot/4.0-SNAPSHOT/reference/io/rest-client.html#io.rest-client.httpservice.importing&quot;&gt;Spring Boot 4.0&lt;/a&gt; transparently applies initialization of the HTTP client builder for each group through its &lt;code&gt;RestClient&lt;/code&gt; and &lt;code&gt;WebClient&lt;/code&gt; auto configuration. Furthermore, it also provides support for HTTP client properties by group:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Global, applies to all groups
spring.http.client.service.read-timeout=2s

# GitHub group
spring.http.client.service.group.github.base-url=https://api.github.com

# Stackoverflow group
spring.http.client.service.group.stackoverflow.base-url=https://api.stackexchange.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring Cloud 2025.1 provides transparent support for &lt;a href=&quot;https://docs.spring.io/spring-cloud-commons/reference/5.0-SNAPSHOT/spring-cloud-commons/loadbalancer.html#_loadbalancer_integration_for_spring_interface_clients_autoconfiguration&quot;&gt;load-balancing&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-cloud-commons/reference/5.0-SNAPSHOT/spring-cloud-circuitbreaker.html#interface-clients&quot;&gt;circuit-breaking&lt;/a&gt; for HTTP service groups.&lt;/p&gt;
&lt;p&gt;Spring Security 7.0 provides &lt;a href=&quot;https://docs.spring.io/spring-security/reference/7.0-SNAPSHOT/features/integrations/rest/http-interface.html#configuration-restclient&quot;&gt;OAuth support&lt;/a&gt; for HTTP service groups that detects a &lt;code&gt;@ClientRegistrationId&lt;/code&gt; annotation on &lt;code&gt;@HttpExchange&lt;/code&gt; methods. Additional authentication support is under consideration with &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/17940&quot;&gt;spring-security#17940&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h1&gt;
&lt;p&gt;The new HTTP service registry lets applications declare HTTP services and configure underlying client infrastructure while the framework does the rest. It is also an extensible mechanism for powerful, out-of-the-box HTTP client initialization features.&lt;/p&gt;
&lt;p&gt;We know there is a wide range of scenarios and perspectives on this topic, and also a long history of prior experience with OpenFeign. At the same time when we bring a capability into the Spring Framework it is an opportunity to revisit it with a fresh perspective, and provide something more minimal and widely useful. We need you to give what we have come up with a try, and let us know how it works in your concrete scenarios.&lt;/p&gt;
&lt;p&gt;Samples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rstoyanchev/springio25-service-registry&quot;&gt;GitHub and StackOverflow clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/OlgaMaciaszek/interface-clients-springio-2025-demo&quot;&gt;Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring AI 1.1.0-M2 Available Now: Enhanced Model Context Protocol Support]]></title><link>https://spring.io/blog/2025/09/19/spring-ai-1-1-0-M2-mcp-focused</link><guid isPermaLink="true">https://spring.io/blog/2025/09/19/spring-ai-1-1-0-M2-mcp-focused</guid><dc:creator><![CDATA[markpollack]]></dc:creator><pubDate>Fri, 19 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the Spring AI engineering team and everyone who has contributed, I&apos;m happy to announce that Spring AI &lt;code&gt;1.1.0-M2&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This milestone release focuses primarily on &lt;strong&gt;enhanced Model Context Protocol (MCP) support&lt;/strong&gt;, incorporating critical fixes and improvements from the &lt;a href=&quot;https://github.com/modelcontextprotocol/java-sdk/releases/tag/v0.13.0&quot;&gt;MCP Java SDK v0.13.0 release&lt;/a&gt;, along with significant updates across many areas of Spring AI.&lt;/p&gt;
&lt;h2 id=&quot;release-summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#release-summary&quot; aria-label=&quot;release summary permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Release Summary&lt;/h2&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-ai/releases/tag/v1.1.0-M2&quot;&gt;56 improvements, bug fixes, and documentation updates&lt;/a&gt;. The primary focus areas include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model Context Protocol Enhancements&lt;/strong&gt;: Updated to MCP Java SDK v0.13.1 with mcp-annotations v0.4.1 and protocol version 2025-06-18 support&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MCP Integration Fixes&lt;/strong&gt;: Resolved critical stateless server registration issues with AOT compilation support&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New Features&lt;/strong&gt;: 16 new capabilities and functionality additions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stability&lt;/strong&gt;: 12 bug fixes addressing community-reported issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: 6 improvements including comprehensive MCP getting started guide&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other Improvements&lt;/strong&gt;: 22 enhancements including performance optimizations and dependency upgrades&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-model-context-protocol-improvements&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-model-context-protocol-improvements&quot; aria-label=&quot; model context protocol improvements permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔧 Model Context Protocol Improvements&lt;/h2&gt;
&lt;p&gt;This release brings many MCP improvements, motivated by significant improvements in the latest version of MCP Java SDK.&lt;/p&gt;
&lt;h3 id=&quot;core-mcp-enhancements&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#core-mcp-enhancements&quot; aria-label=&quot;core mcp enhancements permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Core MCP Enhancements&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updated MCP Java SDK&lt;/strong&gt;: Upgraded from v0.12.1 to v0.13.1, incorporating protocol version 2025-06-18 support&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced MCP Annotations&lt;/strong&gt;: Updated to mcp-annotations v0.4.1 with AOT (Ahead-of-Time) compilation support for native image compatibility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stateless Server Registration&lt;/strong&gt;: Fixed critical issues with MCP server connection handling for reliable production deployments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Tool Management&lt;/strong&gt;: Improved tool name prefix generation with automatic duplicate handling&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configuration Improvements&lt;/strong&gt;: Streamlined MCP configuration properties for better Spring Boot integration&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comprehensive Documentation&lt;/strong&gt;: Added improved MCP documentation and getting started guide for developers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency Management&lt;/strong&gt;: Leverages the new &lt;code&gt;mcp-core&lt;/code&gt; module with reduced Jackson dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;integration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#integration&quot; aria-label=&quot;integration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Integration&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose Support&lt;/strong&gt;: Native service connection support for MCP Gateway in containerized environments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testcontainers Integration&lt;/strong&gt;: Seamless testing capabilities for Docker-based MCP gateway deployments&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;breaking-changes--migration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#breaking-changes--migration&quot; aria-label=&quot;breaking changes  migration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Breaking Changes &amp;#x26; Migration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The MCP Java SDK v0.13.0 includes breaking changes that Spring AI now handles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updated &lt;code&gt;CallToolResult.structuredContent()&lt;/code&gt; API for better array-type content support&lt;/li&gt;
&lt;li&gt;Module restructuring for improved dependency management&lt;/li&gt;
&lt;li&gt;Enhanced error recovery in &lt;code&gt;LifecycleInitializer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For developers using MCP in Spring AI applications, this release provides a more stable and feature-rich foundation for tool integration workflows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special thanks to the &lt;a href=&quot;https://github.com/modelcontextprotocol/java-sdk/releases/tag/v0.13.0&quot;&gt;MCP Java SDK v0.13.0&lt;/a&gt; community&lt;/strong&gt; for their exceptional work on the underlying SDK improvements that made this Spring AI release possible:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Broadcom&lt;/strong&gt;: &lt;a href=&quot;https://github.com/tzolov&quot;&gt;Christian Tzolov (@tzolov)&lt;/a&gt;, &lt;a href=&quot;https://github.com/Kehrlann&quot;&gt;Daniel Garnier-Moiroux (@Kehrlann)&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Oracle&lt;/strong&gt;: &lt;a href=&quot;https://github.com/graemerocher&quot;&gt;Graeme Rocher (@graemerocher)&lt;/a&gt;, &lt;a href=&quot;https://github.com/sdelamo&quot;&gt;Sergio del Amo (@sdelamo)&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Google&lt;/strong&gt;: &lt;a href=&quot;https://github.com/quaff&quot;&gt;Yanming Zhou (@quaff)&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Open Source Community&lt;/strong&gt;: &lt;a href=&quot;https://github.com/He-Pin&quot;&gt;@He-Pin&lt;/a&gt; - Apache Pekko PMC member and active Project Reactor contributor&lt;/p&gt;
&lt;h2 id=&quot;additional-functional-areas-enhanced&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#additional-functional-areas-enhanced&quot; aria-label=&quot;additional functional areas enhanced permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Additional Functional Areas Enhanced&lt;/h2&gt;
&lt;p&gt;Beyond MCP improvements, this release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improved Structured Output&lt;/strong&gt;: VertexAI Gemini response schema validation for guaranteed JSON/XML generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chinese AI Model Expansion&lt;/strong&gt;: ZhipuAI integration with GLM-4.5, GLM-Z1, and GLM-4.1v-thinking-flash models&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New OCR Model support&lt;/strong&gt;: Mistral AI OCR API for document and image text extraction&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ollama Enterprise Features&lt;/strong&gt;: Updated hardware, memory, and performance configuration options&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Consistency&lt;/strong&gt;: Unified builder patterns across EmbeddingOptions, ChatOptions, and AssistantMessage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anthropic Cache Management&lt;/strong&gt;: Implemented cache management for Anthropic API with eligibility tracking for improved performance and resource optimization&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google GenAI Enhancements&lt;/strong&gt;: Added extended token usage metadata and Cached Content API support to Google GenAI (Gemini) for enhanced performance monitoring and content caching capabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;contributors-and-community&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#contributors-and-community&quot; aria-label=&quot;contributors and community permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors and Community&lt;/h2&gt;
&lt;p&gt;A big thank-you to everyone who reported issues, submitted fixes, and contributed features in this milestone. Your work directly strengthens the project and is greatly appreciated.&lt;/p&gt;
&lt;p&gt;We also know there are still community pull requests waiting to be reviewed and merged. We appreciate your patience and want you to know we are actively working through the backlog to give contributions the attention they deserve.&lt;/p&gt;
&lt;p&gt;🙏 &lt;strong&gt;Contributors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks to all contributors who made this release possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apappascs&quot;&gt;Alexandros Pappas (@apappascs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andrei.sumin&quot;&gt;Andrei Sumin (@andrei.sumin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tzolov&quot;&gt;Christian Tzolov (@tzolov)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddobrin&quot;&gt;Dan Dobrin (@ddobrin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/git&quot;&gt;Daniel Garnier-Moiroux (@git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eddu.melendez&quot;&gt;Eddú Meléndez (@eddu.melendez)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gareth&quot;&gt;Gareth Evans (@gareth)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ilayaperumalg&quot;&gt;Ilayaperumal Gopinathan (@ilayaperumalg)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joshlong&quot;&gt;Josh Long (@joshlong)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bytesgo&quot;&gt;leeyazhou (@bytesgo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bert825_work&quot;&gt;Li Huagang-简放视野 (@bert825_work)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicolaskrier&quot;&gt;Nicolas Krier (@nicolaskrier)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexanderklmn&quot;&gt;Oleksandr Klymenko (@alexanderklmn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ai-afk&quot;&gt;SiBo Ai (@ai-afk)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stuart.loxton&quot;&gt;Stuart Loxton (@stuart.loxton)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sunyuhan1998&quot;&gt;Sun Yuhan (@sunyuhan1998)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ThomasVitale&quot;&gt;Thomas Vitale (@ThomasVitale)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/makingx&quot;&gt;Toshiaki Maki (@makingx)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/waldemar.panas&quot;&gt;Waldemar Panas (@waldemar.panas)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xfl12345&quot;&gt;xfl12345 (@xfl12345)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhouyanming&quot;&gt;Yanming Zhou (@zhouyanming)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eeaters&quot;&gt;YuJie Wan (@eeaters)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/luyunkui95&quot;&gt;YunKui Lu (@luyunkui95)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-ai/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-ai&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-ai/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-ai/docs/1.1.0-M2/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://github.com/modelcontextprotocol/java-sdk&quot;&gt;MCP Java SDK&lt;/a&gt; | &lt;a href=&quot;https://spring.io/blog/2025/09/16/spring-ai-mcp-intro-blog&quot;&gt;Blog Tutorial: Connect Your AI to Everything&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-ai&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>