<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 02 Oct 2025 00:42:55 GMT</lastBuildDate><item><title><![CDATA[Spring AI 1.0.3 Available Now]]></title><link>https://spring.io/blog/2025/10/01/spring-ai-1-0-3-available-now</link><guid isPermaLink="true">https://spring.io/blog/2025/10/01/spring-ai-1-0-3-available-now</guid><dc:creator><![CDATA[markpollack]]></dc:creator><pubDate>Wed, 01 Oct 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the Spring AI engineering team and everyone who has contributed, I&apos;m happy to announce that Spring AI &lt;code&gt;1.0.3&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This patch release delivers important stability improvements and bug fixes.&lt;/p&gt;
&lt;h2 id=&quot;release-summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#release-summary&quot; aria-label=&quot;release summary permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Release Summary&lt;/h2&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-ai/releases/tag/v1.0.3&quot;&gt;27 improvements, bug fixes, and documentation updates&lt;/a&gt;. The focus of this patch release is on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improvements&lt;/strong&gt;: 18 enhancements to expand capabilities and functionality&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stability&lt;/strong&gt;: 6 bug fixes addressing community-reported issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: 3 improvements to help developers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h2 id=&quot;key-highlights&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#key-highlights&quot; aria-label=&quot;key highlights permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Key Highlights&lt;/h2&gt;
&lt;p&gt;This patch release includes several improvements and fixes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GemFire Vector Store&lt;/strong&gt; - metadata filtering queries for more precise vector search operations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AWS Bedrock&lt;/strong&gt; - new BedrockChatOptions API and proxy chat model fixes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GraalVM Native Image&lt;/strong&gt; - ahead-of-time compilation improvements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Bean Injection&lt;/strong&gt; - OpenAiApi now available as an injectable Spring bean&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Streaming and Tool Calling&lt;/strong&gt; - improved event handling and error messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt; - better IDE auto-completion and documentation updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These changes continue to improve the stability and usability of Spring AI.&lt;/p&gt;
&lt;h2 id=&quot;whats-next&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-label=&quot;whats next permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What&apos;s Next&lt;/h2&gt;
&lt;p&gt;The Spring AI team is making good progress on PR merging with a downward trend in our backlog. We&apos;re targeting a 1.1 GA release in 4-5 weeks with a primary focus on Model Context Protocol (MCP) functionality.&lt;/p&gt;
&lt;p&gt;For the latest updates and to contribute to the project, visit our &lt;a href=&quot;https://github.com/spring-projects/spring-ai&quot;&gt;GitHub repository&lt;/a&gt; or join the discussion in our community channels. For general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-ai&quot;&gt;&lt;code&gt;spring-ai&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;contributors&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#contributors&quot; aria-label=&quot;contributors permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;p&gt;Thanks to all contributors who made this release possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/albertattard&quot;&gt;Albert Attard (@albertattard)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kirkster96&quot;&gt;Cameron Kirk (@kirkster96)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cho&quot;&gt;cho-thinkfree-com (@cho)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/christian.tzolov&quot;&gt;Christian Tzolov (@christian.tzolov)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bottarde&quot;&gt;Eric Bottard (@bottarde)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crad_on25&quot;&gt;Hyoseop Song (@crad_on25)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/academey&quot;&gt;Hyunjoon Park (@academey)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ilayaperumalg&quot;&gt;Ilayaperumal Gopinathan (@ilayaperumalg)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jason.huynh&quot;&gt;Jason Huynh (@jason.huynh)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joshlong&quot;&gt;Josh Long (@joshlong)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leehaut&quot;&gt;lance (@leehaut)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bert825_work&quot;&gt;Li Huagang-?Û¯?å¯ (@bert825_work)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mark.pollack&quot;&gt;Mark Pollack (@mark.pollack)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexanderklmn&quot;&gt;Oleksandr Klymenko (@alexanderklmn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ai-afk&quot;&gt;SiBo Ai (@ai-afk)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/soby.chacko&quot;&gt;Soby Chacko (@soby.chacko)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sunyuhan1998&quot;&gt;Sun Yuhan (@sunyuhan1998)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/waldemar.panas&quot;&gt;Waldemar Panas (@waldemar.panas)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xfl12345&quot;&gt;xfl12345 (@xfl12345)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhouyanming&quot;&gt;Yanming Zhou (@zhouyanming)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fatebugs&quot;&gt;??Bug (@fatebugs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;resources&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#resources&quot; aria-label=&quot;resources permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-ai/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-ai&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-ai/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-ai/docs/1.0.3/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-ai&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Securing MCP Servers with Spring AI]]></title><link>https://spring.io/blog/2025/09/30/spring-ai-mcp-server-security</link><guid isPermaLink="true">https://spring.io/blog/2025/09/30/spring-ai-mcp-server-security</guid><dc:creator><![CDATA[dgarnier]]></dc:creator><pubDate>Tue, 30 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;https://github.com/spring-io/spring-io-static/blob/main/blog/dgarnier/20250930/spring-ai-oauth2-banner.png?raw=true&quot; style=&quot;float: left; display: block; margin: auto; width: 150px; margin-right: 10px;&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://modelcontextprotocol.io/&quot;&gt;Model Context Protocol&lt;/a&gt;, or MCP for short, has taken over the AI world.
If you&apos;ve been following our blog, you&apos;ve probably read the introduction to the
topic, &lt;a href=&quot;https://spring.io/blog/2025/09/16/spring-ai-mcp-intro-blog&quot;&gt;Connect Your AI to Everything: Spring AI&apos;s MCP Boot Starters&lt;/a&gt;.
The security aspects of MCP have been evolving fast, and the latest version of the spec is getting more and more support
from the ecosystem.
To meet the needs of Spring users, we have incubated a dedicated project on
Github: &lt;a href=&quot;https://github.com/spring-ai-community/mcp-security/&quot;&gt;spring-ai-community/mcp-security&lt;/a&gt;.
This week, we pushed our first releases, and you can now add them to your Spring AI 1.1.x-based applications.
In this post, we&apos;ll explore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#securing-mcp-servers-with-oauth-2&quot;&gt;Securing MCP Servers with OAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mcp-compatible-spring-authorization-server&quot;&gt;Building an MCP-compatible Spring Authorization Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#beyond-oauth-2-api-keys&quot;&gt;Securing MCP Servers with API Keys&lt;/a&gt; instead of OAuth2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;securing-mcp-servers-with-oauth-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#securing-mcp-servers-with-oauth-2&quot; aria-label=&quot;securing mcp servers with oauth 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Securing MCP Servers with OAuth 2&lt;/h2&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization&quot;&gt;Authorization section&lt;/a&gt;
of the MCP specification, MCP Servers exposed over HTTP must be secured with OAuth 2 access tokens.
Any call to an MCP Server must have a header &lt;code&gt;Authorization: Bearer &amp;#x3C;access_token&gt;&lt;/code&gt;, where the access token is obtained
from an authorization server (think: Okta, Github, ...) on behalf of the user.
The MCP Server must also explicitly advertise the authorization servers it trusts, so MCP clients can discover them
dynamically, register themselves with the auth servers, and obtain tokens.
We&apos;ll discuss authorization servers later on, but for now we&apos;ll assume you have an auth server configured and running at
&lt;code&gt;&amp;#x3C;AUTH_SERVER_URL&gt;&lt;/code&gt;, and we&apos;ll hook our MCP Server to it.
If you need to setup an authorization server, see &lt;a href=&quot;#mcp-compatible-spring-authorization-server&quot;&gt;next section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, add the required dependencies to your project:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Maven:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;#x3C;dependencies&gt;

    &amp;#x3C;!-- Spring AI MCP starter --&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.ai&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-ai-starter-mcp-server-webmvc&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;
    &amp;#x3C;!-- MCP Security --&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springaicommunity&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;mcp-server-security&amp;#x3C;/artifactId&gt;
        &amp;#x3C;version&gt;0.0.2&amp;#x3C;/version&gt;
    &amp;#x3C;/dependency&gt;
    &amp;#x3C;!-- MCP Security dependencies --&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.boot&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-boot-starter-oauth2-resource-server&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;

&amp;#x3C;/dependencies&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Gradle:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;implementation(&quot;org.springframework.ai:spring-ai-starter-mcp-server-webmvc&quot;)
implementation(&quot;org.springaicommunity:mcp-server-security:0.0.2&quot;)
implementation(&quot;org.springframework.boot:spring-boot-starter-oauth2-resource-server&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensure that MCP server is enabled in your &lt;code&gt;application.properties&lt;/code&gt;, and inject your authorization server URL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;spring.ai.mcp.server.name=my-cool-mcp-server
# Supported protocols: STREAMABLE, STATELESS
spring.ai.mcp.server.protocol=STREAMABLE
# Choose any property name you&apos;d like
# You MAY use the usual Spring well-known &quot;spring.security.oauth2.resourceserver.jwt.issuer-uri&quot;.
authorization.server.url=&amp;#x3C;AUTH_SERVER_URL&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will add a simple MCP tool that greets the user, based on an input language (&quot;english&quot;, &quot;french&quot;, ...) and on
the user&apos;s name.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Service
public class MyToolsService {

    @McpTool(name = &quot;greeter&quot;, description = &quot;A tool that greets you, in the selected language&quot;)
    public String greet(
            @ToolParam(description = &quot;The language for the greeting (example: english, french, ...)&quot;) String language
    ) {
        if (!StringUtils.hasText(language)) {
            language = &quot;&quot;;
        }
        var authentication = SecurityContextHolder.getContext().getAuthentication();
        var name = authentication.getName();
        return switch (language.toLowerCase()) {
            case &quot;english&quot; -&gt; &quot;Hello, %s!&quot;.formatted(name);
            case &quot;french&quot; -&gt; &quot;Salut %s!&quot;.formatted(name);
            default -&gt; (&quot;I don&apos;t understand language \&quot;%s\&quot;. &quot; +
                        &quot;So I&apos;m just going to say Hello %s!&quot;).formatted(language, name);
        };
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the tool will look up the name of the user from the &lt;code&gt;SecurityContext&lt;/code&gt;, and create a personalised
greeting.
The name of the user will be the &lt;code&gt;sub&lt;/code&gt; claim from the JWT access token used to authenticate the request:&lt;/p&gt;
&lt;p&gt;And, last but not least, we add a configuration class for security, for example &lt;code&gt;McpServerSecurityConfiguration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Configuration
@EnableWebSecurity
class McpServerSecurityConfiguration {

    @Value(&quot;${authorization.server.url}&quot;)
    private String authServerUrl;

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                // Enforce authentication with token on EVERY request
                .authorizeHttpRequests(auth -&gt; auth.anyRequest().authenticated())
                // Configure OAuth2 on the MCP server
                .with(
                        McpResourceServerConfigurer.mcpServerOAuth2(),
                        (mcpAuthorization) -&gt; {
                            // REQUIRED: the authserver&apos;s issuer URI
                            mcpAuthorization.authorizationServer(this.authServerUrl);
                            // OPTIONAL: enforce the `aud` claim in the JWT token.
                            mcpAuthorization.validateAudienceClaim(true);
                        }
                )
                .build();
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the application with &lt;code&gt;./mvnw spring-boot:run&lt;/code&gt; or &lt;code&gt;./gradlew bootRun&lt;/code&gt;. It should start on port 8080.
If you try to access the MCP server at &lt;code&gt;http://localhost:8080/mcp&lt;/code&gt;, you will get an &lt;code&gt;WWW-authenticate&lt;/code&gt; indicating the
OAuth2 resource metadata URL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -XPOST  -w &apos;%{http_code}\n%header{www-authenticate}&apos; http://localhost:8080/mcp
#
# Will print out:
#
# 401
# Bearer resource_metadata=http://localhost:8080/.well-known/oauth-protected-resource/mcp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The metadata URL itself will indicate to potential clients where the authorization server is located:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl http://localhost:8080/.well-known/oauth-protected-resource/mcp
#
# Will print out:
#
# {
#   &quot;resource&quot;: &quot;http://localhost:8080/mcp&quot;,
#   &quot;authorization_servers&quot;: [
#     &quot;&amp;#x3C;AUTH_SERVER_URL&gt;&quot;
#   ],
#   &quot;resource_name&quot;: &quot;Spring MCP Resource Server&quot;,
#   &quot;bearer_methods_supported&quot;: [
#     &quot;header&quot;
#   ]
# }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not very useful to a human, but it helps other programs find the authentication entry points for your MCP
Server.
Every AI-based app has their own unique way of adding an MCP server, but a good tool to debug your server is the
&lt;a href=&quot;https://modelcontextprotocol.io/docs/tools/inspector&quot;&gt;MCP inspector&lt;/a&gt;. You can run it easily with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npx @modelcontextprotocol/inspector@0.16.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the UI, you must set the URL of your server, and then click &quot;Open Auth Settings&quot;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.spring.io/blog/dgarnier/20250930/mcp-inspector.png&quot; alt=&quot;MCP inspector screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the auth settings, select the &quot;Quick OAuth Flow&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.spring.io/blog/dgarnier/20250930/mcp-inspector-authentication.png&quot; alt=&quot;MCP inspector screenshot: Authentication Settings page&quot;&gt;&lt;/p&gt;
&lt;p&gt;This will redirect you to the authorization server.
Once you log in, you will be redirected back to the MCP inspector, which will display a success message and the first
few characters of an access token. From there, you should be able to connect and ultimately call our &quot;greeter&quot; tool:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.spring.io/blog/dgarnier/20250930/mcp-inspector-tool-call.png&quot; alt=&quot;MCP inspector screenshot: Call tool page&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the screenshot above, in order, you can do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select the &lt;code&gt;Tools&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;List tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;greeter&lt;/code&gt; tool&lt;/li&gt;
&lt;li&gt;Fill the arguments and call the tool&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And with this, you have your very first spec-compliant, OAuth2-secured MCP Server.
There are variants around this implementation, for example a use-case where everything on the MCP server is publicly
accessible (e.g. &quot;list tools&quot;), except calling the tools themselves.
It is not spec compliant but matches certain specific needs.
You can learn
more &lt;a href=&quot;https://github.com/spring-ai-community/mcp-security/?tab=readme-ov-file#special-case-only-secure-tool-calls-with-oauth2&quot;&gt;in the dedicated section&lt;/a&gt;
in the mcp-security docs.&lt;/p&gt;
&lt;p&gt;Of course, for users to log in, you must connect your MCP Server to an authorization server, that complies with the
required specifications for MCP, such as dynamic client registration.
While there are many SaaS options available, you can also write you own
with &lt;a href=&quot;https://docs.spring.io/spring-authorization-server/&quot;&gt;Spring Authorization Server&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;mcp-compatible-spring-authorization-server&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mcp-compatible-spring-authorization-server&quot; aria-label=&quot;mcp compatible spring authorization server permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MCP-compatible Spring Authorization Server&lt;/h2&gt;
&lt;p&gt;To create an MCP-compatible authorization server with Spring, create a new Spring project, with Spring Authorization
Server, and add the MCP-specific:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Maven&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;#x3C;dependency&gt;
    &amp;#x3C;groupId&gt;org.springaicommunity&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;mcp-authorization-server&amp;#x3C;/artifactId&gt;
    &amp;#x3C;version&gt;0.0.2&amp;#x3C;/version&gt;
&amp;#x3C;/dependency&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;implementation(&quot;org.springaicommunity:mcp-authorization-server:0.0.2&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can configure the Authorization Server in the usual way (
see &lt;a href=&quot;https://docs.spring.io/spring-security/reference/7.0/servlet/oauth2/authorization-server/getting-started.html#oauth2AuthorizationServer-developing-your-first-application&quot;&gt;reference documentation&lt;/a&gt;).
Here is an example &lt;code&gt;application.yml&lt;/code&gt; for registering a default client and a default user:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;spring:
  application:
    name: sample-authorization-server
  security:
    oauth2:
      authorizationserver:
        client:
          default-client:
            token:
              access-token-time-to-live: 1h
            registration:
              client-id: &quot;default-client-id&quot;
              client-secret: &quot;{noop}default-client-secret&quot;
              client-authentication-methods:
                - &quot;client_secret_basic&quot;
                - &quot;none&quot;
              authorization-grant-types:
                - &quot;authorization_code&quot;
                - &quot;client_credentials&quot;
              redirect-uris:
                - &quot;http://127.0.0.1:8080/authorize/oauth2/code/authserver&quot;
                - &quot;http://localhost:8080/authorize/oauth2/code/authserver&quot;
                # mcp-inspector
                - &quot;http://localhost:6274/oauth/callback&quot;
    user:
      # A single user, named &quot;user&quot;
      name: user
      password: password

server:
  port: 9000
  servlet:
    session:
      cookie:
        # Override the default cookie name (JSESSIONID).
        # This allows running multiple Spring apps on localhost, and they&apos;ll each have their own cookie.
        # Otherwise, since the cookies do not take the port into account, they are confused.
        name: MCP_AUTHORIZATION_SERVER_SESSIONID
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is only an example, and you&apos;ll likely want to write your own configuration.
With this configuration, there will be a single user registered (username: &lt;code&gt;user&lt;/code&gt;, password: &lt;code&gt;password&lt;/code&gt;).
There will also be a single OAuth2 Client (&lt;code&gt;default-client-id&lt;/code&gt; / &lt;code&gt;default-client-secret&lt;/code&gt;).
You can then activate all the authorization server capabilities with the usual Spring Security API,
the security filter chain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Bean
SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    return http
            // all requests must be authenticated
            .authorizeHttpRequests(auth -&gt; auth.anyRequest().authenticated())
            // enable authorization server customizations
            .with(McpAuthorizationServerConfigurer.mcpAuthorizationServer(), withDefaults())
            // enable form-based login, for user &quot;user&quot;/&quot;password&quot;
            .formLogin(withDefaults())
            .build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, your Spring Authorization Server will
support &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7591.html&quot;&gt;OAuth 2 Dynamic Client Registration&lt;/a&gt; as well as &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc8707.html&quot;&gt;Resource
Indicators for OAuth 2&lt;/a&gt;.
Connecting your MCP Server to this authorization server is compatible with the majority of AI tools,
such as Claude Desktop, Cursor, or the MCP inspector.&lt;/p&gt;
&lt;h2 id=&quot;beyond-oauth-2-api-keys&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#beyond-oauth-2-api-keys&quot; aria-label=&quot;beyond oauth 2 api keys permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Beyond OAuth 2: API keys&lt;/h2&gt;
&lt;p&gt;While the MCP specification mandates using OAuth2 for security, many environments do not have the infrastructure to
support this use-case.
To be usable in environments lacking OAuth 2, many clients, including the MCP inspector itself, allow you to pass custom
headers when making requests.
This opens the door to alternative authentication flows, including API key-based security.
The MCP Security project supports API keys, which we&apos;ll showcase below.&lt;/p&gt;
&lt;p&gt;First, add the dependencies to your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;#x3C;dependencies&gt;

    &amp;#x3C;!-- Spring AI MCP starter --&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.ai&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-ai-starter-mcp-server-webmvc&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;
    &amp;#x3C;!-- MCP Security --&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springaicommunity&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;mcp-server-security&amp;#x3C;/artifactId&gt;
        &amp;#x3C;version&gt;0.0.2&amp;#x3C;/version&gt;
    &amp;#x3C;/dependency&gt;
    &amp;#x3C;!-- MCP Security dependencies --&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.boot&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-boot-starter-security&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;

&amp;#x3C;/dependencies&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Gradle:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;implementation(&quot;org.springframework.ai:spring-ai-starter-mcp-server-webmvc&quot;)
implementation(&quot;org.springaicommunity:mcp-server-security:0.0.2&quot;)
implementation(&quot;org.springframework.boot:spring-boot-starter-security&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensure that MCP server is enabled in your &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;spring.ai.mcp.server.name=my-cool-mcp-server
# Supported protocols: STREAMABLE, STATELESS
spring.ai.mcp.server.protocol=STREAMABLE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&quot;Entites&quot; authenticated by an API key, such as users or service accounts, are represented by &lt;code&gt;ApiKeyEntity&lt;/code&gt;. The MCP
server checks a specific header for an API key, loads the entity, and validates the secret.
You can bring your own entity implementation, and your own entity repository, for specific security validations.&lt;/p&gt;
&lt;p&gt;With that, you can configure the security for your project in the usual Spring-Security way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Configuration
@EnableWebSecurity
class McpServerConfiguration {

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http.authorizeHttpRequests(authz -&gt; authz.anyRequest().authenticated())
                .with(
                        McpApiKeyConfigurer.mcpServerApiKey(),
                        (apiKey) -&gt; apiKey.apiKeyRepository(apiKeyRepository())
                )
                .build();
    }

    private ApiKeyEntityRepository&amp;#x3C;ApiKeyEntityImpl&gt; apiKeyRepository() {
        var apiKey = ApiKeyEntityImpl.builder()
                .name(&quot;test api key&quot;)
                .id(&quot;api01&quot;)
                .secret(&quot;mycustomapikey&quot;)
                .build();

        return new InMemoryApiKeyEntityRepository&amp;#x3C;&gt;(List.of(apiKey));
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we use an API Key repository that stores simple keys.
Then you should be able to call your MCP server with a header &lt;code&gt;X-API-key: api01.mycustomapikey&lt;/code&gt;. &lt;code&gt;X-API-key&lt;/code&gt; is the
default header name for passing API keys, followed by the header value &lt;code&gt;{id}.{secret}&lt;/code&gt;.
The secret is stored in bcrypt-hashed form on the server side.
The &lt;code&gt;mcpServerApiKey()&lt;/code&gt; configurer offers options for changing the header name, and even dedicated APIs to extract the
API key from incoming HTTP requests.&lt;/p&gt;
&lt;h2 id=&quot;improving-mcp-security&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#improving-mcp-security&quot; aria-label=&quot;improving mcp security permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Improving MCP security&lt;/h2&gt;
&lt;p&gt;If you would like to learn more, head over to
the &lt;a href=&quot;https://github.com/spring-ai-community/mcp-security/&quot;&gt;spring-ai-community/mcp-security&lt;/a&gt; project, for documentation
and samples.
You will also find support for client-side MCP security with Spring AI and Spring Security.
Try it out with your own projects and applications, test it with the rest of the ecosystem, and help us improve it!
We are open to contributions, including feedback and issues.&lt;/p&gt;
&lt;p&gt;In another blog post, we&apos;ll cover how to implement OAuth 2 on the client side, with the
&lt;code&gt;org.springaiframework:mcp-client-security&lt;/code&gt; module.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring: September 30th, 2025]]></title><link>https://spring.io/blog/2025/09/30/this-week-in-spring-september-30th-2025</link><guid isPermaLink="true">https://spring.io/blog/2025/09/30/this-week-in-spring-september-30th-2025</guid><dc:creator><![CDATA[joshlong]]></dc:creator><pubDate>Tue, 30 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! As I write this I am about to board a flight for Colorado for the amazing Dev2Next conference! I&apos;ll be in Antwerp, Beglium for the amazing Devoxx event next week, and I&apos;ll be speaking at the Amsterdam JUG with James Ward on the Thursday after that, too! If you&apos;re around, be sure to say &lt;em&gt;Hi&lt;/em&gt;!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I looked at some of the amazing new &lt;a href=&quot;https://www.youtube.com/watch?v=ep8IZl8sk5A&quot;&gt;&lt;em&gt;resilience methods&lt;/em&gt; in Spring Framework 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;here&apos;s a nice talk on how to continuously align and ugprade your Spring dependencies, recorded at this year&apos;s Spring IO 2025 event &lt;a href=&quot;https://www.youtube.com/watch?v=80V4_QDTiZk&quot;&gt;in beautiful Barcelona, Spain!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I love this! Check out some of the prelimary details of the &lt;a href=&quot;https://github.com/spring-ai-community/mcp-security&quot;&gt;MCP Security community project for Spring AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;for more on that, check out the &lt;a href=&quot;https://spring.io/blog/2025/09/30/spring-ai-mcp-server-security&quot;&gt;Securing MCP Servers with Spring AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I love this blog called &lt;a href=&quot;https://spring.io/blog/2025/09/30/the-state-of-http-clients-in-spring&quot;&gt;The State of HTTP Clients in Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;On last week&apos;s installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I talked  &lt;a href=&quot;https://spring.io/blog/2025/09/25/a-bootiful-podcast-mahmoud-ben-hassine&quot;&gt;Spring Batch lead Mahmoud Ben Hassine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interesting! Udemy has a course: &lt;a href=&quot;https://www.udemy.com/course/learn-microservices-with-spring-boot-real-project-course/?srsltid=AfmBOorVlOpva6hlcX6B3rEXOrTyOP1cI5yd2ZjM3RyNIWrINQDCIPX2&quot;&gt;&lt;em&gt;Learn Microservcies with Spring Boot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I liked this new guide on Microsoft about &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/developer/java/spring-framework/spring-boot-starter-for-entra-developer-guide?tabs=SpringCloudAzure6x&quot;&gt;using Spring Boot with Microsoft Entra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[The state of HTTP clients in Spring]]></title><link>https://spring.io/blog/2025/09/30/the-state-of-http-clients-in-spring</link><guid isPermaLink="true">https://spring.io/blog/2025/09/30/the-state-of-http-clients-in-spring</guid><dc:creator><![CDATA[bclozel]]></dc:creator><pubDate>Tue, 30 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a new blog post in the &lt;a href=&quot;https://spring.io/blog/2025/09/02/road_to_ga_introduction&quot;&gt;Road to GA series&lt;/a&gt;, this time exploring the new capabilities of our HTTP clients.
This is also a good time to reflect on the state of HTTP clients in Spring, so we will use this opportunity to explain an important announcement: we are officially deprecating &lt;code&gt;RestTemplate&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;upcoming-restclient-features&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#upcoming-restclient-features&quot; aria-label=&quot;upcoming restclient features permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Upcoming RestClient features&lt;/h2&gt;
&lt;p&gt;RestClient has been introduced in Spring Framework 6.1 and evolved in the 6.x line.
In the upcoming 7.0 major version we are keeping up the pace with a round of new features.&lt;/p&gt;
&lt;h3 id=&quot;api-versioning&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#api-versioning&quot; aria-label=&quot;api versioning permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API Versioning&lt;/h3&gt;
&lt;p&gt;Spring &lt;code&gt;@Controller&lt;/code&gt; now supports the &lt;a href=&quot;https://spring.io/blog/2025/09/16/api-versioning-in-spring&quot;&gt;API Versioning concept to better implement different generations of your REST API within a single application&lt;/a&gt;.
This feature is also supported on the client side, by using an &lt;code&gt;ApiVersionInserter&lt;/code&gt;.
You can, for example, insert the API version information in a custom HTTP request header.
This can be configured when building the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;RestClient customClient = RestClient.builder()
  .baseUrl(&quot;https://spring.io/api&quot;)
  .defaultVersion(&quot;1.2&quot;)
  .apiVersionInserter(ApiVersionInserter.fromHeader(&quot;API-Version&quot;).build())
  .build();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring supports inserting and parsing API versions from HTTP headers, media types, requests paths, query params, or any custom implementation.&lt;/p&gt;
&lt;h3 id=&quot;httpmessageconverters&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#httpmessageconverters&quot; aria-label=&quot;httpmessageconverters permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HttpMessageConverters&lt;/h3&gt;
&lt;p&gt;We revisited how message converters are configured in Spring applications.
&lt;code&gt;HttpMessageConverters&lt;/code&gt; brings a dedicated API and greatly simplifies custom arrangements to replace existing converters, or add custom ones.
Here, we will auto-detect message converters from the classpath and only override the one for JSON support with a custom Jackson &lt;code&gt;JsonMapper&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;JsonMapper jsonMapper = JsonMapper.builder()
  .findAndAddModules()
  .enable(SerializationFeature.INDENT_OUTPUT)
  .defaultDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;))
  .build();

RestClient restClient = RestClient.builder()
  .configureMessageConverters(client -&gt; {
    client.registerDefaults().jsonMessageConverter(new JacksonJsonHttpMessageConverter(jsonMapper));
  })
  .baseUrl(&quot;https://spring.io/api&quot;)
  .build();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring Boot previously filled that need with its own &lt;code&gt;HttpMessageConverters&lt;/code&gt; type; the new Framework variant aims to replace it in Spring Boot applications.
On the WebFlux side, Spring Framework already shipped a reactive equivalent for codecs, the &lt;code&gt;CodecConfigurer&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;http-interface-groups&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-interface-groups&quot; aria-label=&quot;http interface groups permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Http Interface Groups&lt;/h3&gt;
&lt;p&gt;When applications need to configure many &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#rest-http-interface&quot;&gt;Http Interface Clients&lt;/a&gt;, their setup can be quite repetitive and hard to organize.
This new release brings the concept of groups: a powerful way to declare and configure many clients at once and let them share the same &lt;code&gt;RestClient&lt;/code&gt; when it makes sense.&lt;/p&gt;
&lt;p&gt;Here, we define a ¡°stackexchange¡± group for querying both StackOverflow and ServerFault APIs.
The other group, ¡°github¡±, will share the same HTTP client for all interfaces defined in the same base package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration
@ImportHttpServices(group = &quot;stackexchange&quot;, types = {StackOverflowClient.class, ServerFaultClient.class})
@ImportHttpServices(group = &quot;github&quot;, basePackageClasses = GitHubProjects.class)
public class ClientConfig {

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can learn more about this feature in the &lt;a href=&quot;https://spring.io/blog/2025/09/23/http-service-client-enhancements&quot;&gt;&quot;HTTP Service Client Enhancements&quot; blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;resttestclient&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#resttestclient&quot; aria-label=&quot;resttestclient permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RestTestClient&lt;/h3&gt;
&lt;p&gt;Spring Framework 7.0 will ship the &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/7.0/testing/resttestclient.html&quot;&gt;&lt;code&gt;RestTestClient&lt;/code&gt;&lt;/a&gt;, a new client for testing server applications.
&lt;code&gt;RestTestClient&lt;/code&gt; can perform integration tests against live servers, which means they exercise the entire networking stack and message conversion.
RestTestClient can also test a single controller or router function with mock requests and responses, like MockMvc.
Both live server tests and mock-based tests use the same API for performing exchanges and assertions.&lt;/p&gt;
&lt;p&gt;This was a popular request from the community, since &lt;code&gt;WebTestClient&lt;/code&gt; was filling that space in the reactive stack and there was no &lt;code&gt;RestClient&lt;/code&gt; variant.&lt;/p&gt;
&lt;p&gt;This new feature brings more value than Spring Boot¡¯s &lt;code&gt;TestRestTemplate&lt;/code&gt; and can be seen as a replacement, which is why &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/46632&quot;&gt;the team is considering deprecating it&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;new-spring-boot-starters&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#new-spring-boot-starters&quot; aria-label=&quot;new spring boot starters permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;New Spring Boot Starters&lt;/h3&gt;
&lt;p&gt;The community raised concerns on several occasions regarding how HTTP clients are packaged in Spring artifacts.
&lt;code&gt;RestClient&lt;/code&gt; and &lt;code&gt;RestTemplate&lt;/code&gt; live in ¡°org.springframework:spring-web¡±, while &lt;code&gt;WebClient&lt;/code&gt; lives in ¡°org.springframework:spring-webflux¡±.
None of those is shipped in a separate, dedicated client artifact.&lt;/p&gt;
&lt;p&gt;This packaging structure has made it harder for Spring Boot to understand the intent of developers.
Should the application start a web server, auto-configure an HTTP client, or both?
This problem is now solved by one of the major features in the upcoming Spring Boot release: the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/46071&quot;&gt;entire Spring Boot codebase has been modularized and auto-configurations are split into separate artifacts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Spring Boot 4.0, applications can now use the ¡°org.springframework.boot:spring-boot-starter-webclient¡± or ¡°org.springframework.boot:spring-boot-starter-restclient¡± to express the need for an HTTP client.&lt;/p&gt;
&lt;h3 id=&quot;and-more&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#and-more&quot; aria-label=&quot;and more permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;And more!&lt;/h3&gt;
&lt;p&gt;We have made many other smaller refinements, like &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues/33785&quot;&gt;built-in buffering support&lt;/a&gt;, the support for &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues/34924&quot;&gt;Jackson hints on the client side&lt;/a&gt; or &lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues/34699&quot;&gt;Spring Security support for Http Interface Clients&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;limitations-of-resttemplate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#limitations-of-resttemplate&quot; aria-label=&quot;limitations of resttemplate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Limitations of RestTemplate&lt;/h2&gt;
&lt;p&gt;If your application is using &lt;code&gt;RestTemplate&lt;/code&gt;, you will quickly notice that most of the new features mentioned above are not available for &lt;code&gt;RestTemplate&lt;/code&gt;.
In this section, we will explain why we could not implement those features for &lt;code&gt;RestTemplate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RestTemplate&lt;/code&gt; was released with Spring Framework 3.0, more than 15 years ago, and a lot has happened since in the Java ecosystem.&lt;/p&gt;
&lt;p&gt;Our motivation behind &lt;code&gt;RestTemplate&lt;/code&gt; and all other Spring HTTP clients has remained the same over the years: providing the community with a high level HTTP client that integrates well with Spring libraries.
Message body conversion, error handling, interception mechanism, and security are all features that you can use with a familiar Spring programming model.
Many HTTP client libraries are supported, but we do not expose low-level HTTP interactions or specific configuration: you choose to use the one that fits your requirements, but this shouldn¡¯t change the overall developer experience.&lt;/p&gt;
&lt;p&gt;This approach worked well for many years for &lt;code&gt;RestTemplate&lt;/code&gt;, but we found some limitations to this model.&lt;/p&gt;
&lt;p&gt;The ¡°template-style¡± API works well for a limited scope but can be challenging when new features are added.
This is a common pattern in Spring Framework, starting with &lt;code&gt;JdbcTemplate&lt;/code&gt; and &lt;code&gt;JmsTemplate&lt;/code&gt; which predate the HTTP client.
With this pattern, the method namespace gets quickly crowded when the scope expands, and using method overloading for variants adds to the problem.
The &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/6.2.x/javadoc-api/org/springframework/web/client/RestTemplate.html&quot;&gt;&lt;code&gt;RestTemplate&lt;/code&gt; Javadocs&lt;/a&gt; show lots of overloaded methods, and so does the IDE auto-completion.
Any time new functionality is introduced, the developer experience might suffer.
For example, introducing API Versioning support now in &lt;code&gt;RestTemplate&lt;/code&gt; would have required new constructors and added confusion to the Java API.
As a result, we could not ship this feature for &lt;code&gt;RestTemplate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Asynchronous calls were supported with the &lt;code&gt;AsyncRestTemplate&lt;/code&gt; variant, but this approach also had some problems.
Because of the ¡°template-style¡± API, method overloading was an even bigger problem there.
Spring¡¯s &lt;code&gt;ListenableFuture&lt;/code&gt; was a necessary choice at the time, but we were limited by its ability to compose concurrent calls and efficiently manage the underlying HTTP resources.
Of course, the Java Platform offers better alternatives these days.&lt;/p&gt;
&lt;p&gt;Streaming HTTP protocols, like ¡°Server Sent Events¡±, also gained in popularity.
This use case was even more challenging for &lt;code&gt;RestTemplate&lt;/code&gt;, as the typical approach was to receive and convert the entire response at once, and then close it;
whereas, streaming needs to keep the response alive for the entire duration of the stream and perform message conversion item per item.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;RestTemplate&lt;/code&gt; has limitations, it is very popular in the Spring community.
Unfortunately, the template-style API reached its limits and required a complete overhaul.
The Spring team got a chance to address this in Spring Framework 5 with a new HTTP client, that we named &lt;code&gt;WebClient&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;webclient-and-the-reactive-space&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#webclient-and-the-reactive-space&quot; aria-label=&quot;webclient and the reactive space permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WebClient and the Reactive space&lt;/h2&gt;
&lt;p&gt;While working on Spring Framework 4.x maintenance, we heard the call from a significant share of the Java and Spring communities: there was a growing need for asynchronous, non-blocking web stacks that support keeping latency in check.
New web frameworks appeared, many of them using functional-style programming for composing asynchronous operations.
Reactive streams became an industry standard, and protocols like RSocket were born.
Despite the learning curve many teams chose this approach to overcome the limitations of traditional Java asynchronous primitives and thread pools.&lt;/p&gt;
&lt;p&gt;In Spring Framework 5.0, the Spring team introduced a complete reactive stack based on Reactive Streams and Reactor.
From the very beginning, we made sure to communicate clearly that the traditional Servlet stack would not go away and that teams should only consider this approach if they face significant runtime challenges.
Managing latency and composing asynchronous operations were key, whereas optimal performance was never the main goal.&lt;/p&gt;
&lt;p&gt;On the HTTP client side, this was an opportunity for the team to revisit previous decisions and apply what we learned from the past.&lt;/p&gt;
&lt;p&gt;Instead of a ¡°template-style¡± API, we chose a &lt;a href=&quot;https://poutsma-principles.com/blog/2025/06/03/fluent-apis-overview/&quot;&gt;fluent API&lt;/a&gt; for our new HTTP client, &lt;code&gt;WebClient&lt;/code&gt;.
This was the first of a new series of fluent clients, with &lt;code&gt;JdbcClient&lt;/code&gt; and &lt;code&gt;JmsClient&lt;/code&gt; to follow later.
A fluent API significantly reduces the number of methods on any given type.
The auto-completion experience in IDEs is much more focused, because each method in the fluent chain only reflects the available options at that point, instead of presenting all possible options at once.&lt;/p&gt;
&lt;p&gt;Asynchronous, non-blocking infrastructure is a built-in Reactor feature.
Streaming data is also a natural concept in Reactive Streams. But streaming requests and responses changes the dynamics at the message conversion level.
Instead of considering the stream of data as a whole, we need to parse and write data as byte buffers.
This is also coupled with a &lt;code&gt;DataBuffer&lt;/code&gt; contract (instead of &lt;code&gt;byte[]&lt;/code&gt;) that can pool and reuse buffers for better memory efficiency.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WebClient&lt;/code&gt; then appeared as a good alternative to &lt;code&gt;RestTemplate&lt;/code&gt;. The extension points and API style are modern.
If high concurrency or streaming HTTP calls are important features for the application, &lt;code&gt;WebClient&lt;/code&gt; is a viable solution.
We didn¡¯t expect entire applications to be rewritten in WebFlux just for this reason.
This is why we made sure that Spring MVC controllers would &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-ann-async.html#mvc-ann-async-reactive-types&quot;&gt;naturally handle reactive types&lt;/a&gt; as traditional asynchronous calls.
Of course, applications could also call &lt;code&gt;block()&lt;/code&gt; to return to the synchronous world, if necessary.&lt;/p&gt;
&lt;p&gt;At that point, we declared &lt;code&gt;RestTemplate&lt;/code&gt; as ¡°feature complete¡±: because of its limitations, we could not promise new features there.
We deprecated &lt;code&gt;AsyncRestTemplate&lt;/code&gt; at that time, given the superiority of &lt;code&gt;WebClient&lt;/code&gt; for such needs: its asynchronous and non-blocking support, and ability to compose operations and streaming pipelines were far more advanced.
Overall, &lt;code&gt;WebClient&lt;/code&gt; was a better alternative all-around and at the time we hoped the community would eventually converge on a single solution.&lt;/p&gt;
&lt;h2 id=&quot;introducing-restclient&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introducing-restclient&quot; aria-label=&quot;introducing restclient permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introducing RestClient&lt;/h2&gt;
&lt;p&gt;With the new Java 17 baseline in Spring Framework 6.0 and Virtual Threads support scheduled for Java 21, we saw an opportunity for a new take on &lt;code&gt;RestTemplate&lt;/code&gt;.
We used what we learned with &lt;code&gt;WebClient&lt;/code&gt; to solve the ¡°template-style¡± limitations with a modern, fluent API.
We chose to reuse the existing HTTP infrastructure from &lt;code&gt;RestTemplate&lt;/code&gt; and locate this new client in the same package.
This makes the transition easier, because you can create a &lt;code&gt;RestClient&lt;/code&gt; instance using an existing &lt;code&gt;RestTemplate&lt;/code&gt;.
We also published a &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_migrating_from_resttemplate_to_restclient&quot;&gt;dedicated migration guide&lt;/a&gt; to assist developers in that process.&lt;/p&gt;
&lt;p&gt;In retrospect, choosing to keep an imperative, blocking-style API was a good choice: &lt;a href=&quot;https://openjdk.org/jeps/505&quot;&gt;Structured Concurrency&lt;/a&gt; unlocks asynchronous composition for &lt;code&gt;RestClient&lt;/code&gt; without additional changes.
We are still unsure about the streaming use case (more on that later).&lt;/p&gt;
&lt;p&gt;In the last few releases, we saw rapid adoption of &lt;code&gt;RestClient&lt;/code&gt; in the community, but we still didn¡¯t revisit our maintenance stance on &lt;code&gt;RestTemplate&lt;/code&gt;, up until this point.&lt;/p&gt;
&lt;h2 id=&quot;the-future-of-http-clients-in-spring&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-future-of-http-clients-in-spring&quot; aria-label=&quot;the future of http clients in spring permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The future of HTTP clients in Spring&lt;/h2&gt;
&lt;p&gt;By now, there is a significant gap between &lt;code&gt;RestTemplate&lt;/code&gt; and &lt;code&gt;RestClient&lt;/code&gt; that we cannot close due to limitations of template-style API.
Keeping the &lt;code&gt;RestTemplate&lt;/code&gt; around puts part of our community at a disadvantage.
We now think it is time to reconsider our HTTP client arrangement, and here¡¯s our current plan.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Framework 7.0 (November 2025): announce our intent to deprecate &lt;code&gt;RestTemplate&lt;/code&gt; in this blog post, our upgrade guides, and reference documentation.&lt;/li&gt;
&lt;li&gt;Spring Framework 7.1 (provisional date, November 2026): formally ¡°&lt;code&gt;@Deprecate&lt;/code&gt;¡± the client and mark it for removal.&lt;/li&gt;
&lt;li&gt;Spring Framework 8.0 (date to be determined): remove &lt;code&gt;RestTemplate&lt;/code&gt; entirely&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Assuming our current pace of releases, this would leave OSS support for &lt;code&gt;RestTemplate&lt;/code&gt; until at least 2029.
We strongly believe that updating applications to use &lt;code&gt;RestClient&lt;/code&gt; (and the same underlying infrastructure) is the best long term solution.
If your team maintains custom request factories or client interceptors, those can be reused with &lt;code&gt;RestClient&lt;/code&gt;.
Applications can be upgraded iteratively, initially wrapping existing &lt;code&gt;RestTemplate&lt;/code&gt; instances with &lt;code&gt;RestClient&lt;/code&gt; and then reworking the shared configuration.&lt;/p&gt;
&lt;p&gt;This new arrangement leaves us with &lt;code&gt;RestClient&lt;/code&gt; for the traditional stack and &lt;code&gt;WebClient&lt;/code&gt; for the reactive variant, both actively maintained by the team.
The decision process is much easier: you can pick &lt;code&gt;RestClient&lt;/code&gt; for most cases, or choose &lt;code&gt;WebClient&lt;/code&gt; if you need Reactive APIs or streaming capabilities.&lt;/p&gt;
&lt;p&gt;Now, back to the streaming use case.
We are still exploring our options for proper streaming support in &lt;code&gt;RestClient&lt;/code&gt;.
There is no clear path for streaming support in the Java Platform right now, one that would naturally fit with Virtual Threads and Structured Concurrency.
We are in touch with the Java Platform team and the broader industry.&lt;/p&gt;
&lt;p&gt;We are getting close to the Spring Framework 7.0 and Spring Boot 4.0 release dates.
Can you take the latest milestone versions for a spin with one of your applications?
It is still time to improve the upgrade experience and make your job easier in the near future.
As always, your opinion matters - don¡¯t hesitate to share your experience with the Spring HTTP clients here in the comments!&lt;/p&gt;</content:encoded></item></channel></rss>