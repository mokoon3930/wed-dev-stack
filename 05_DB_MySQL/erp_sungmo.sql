
/*
	DB 모델링
    1. 개념적 모델링
		- 엔티티(테이블) 추출
        - 엔티티 간의 관계설정
    2. 논리적 모델링
		- 속성(컬럼) 추출
        - 정규화 작업 (1, 2, 3) ------> 이 이상으로 가면 역정규화
    3. 물리적 모델링
		- 테이블 실질적으로 작성 (CREATE문 작성)
    
    * 정규화(Normalization)
    - 불필요한 데이터의 중복을 제거하여 데이터모델을 구조화하는 것
    - 효율적인 자료 저장 및 데이터 무결성을 보장하고 오류를 최소화하여 안정성을 보장하기 위해 적용함
    
		제 1 정규화 : 복수의 속성값을 갖는 속성을 분리
        제 2 정규화 : 주 식별자에 종속되지 않는 속성을 분리
		제 3 정규화 : 속성에 종속적인 속성을 제거
*/
/*
	사용자 or 사원 관련 정보 들어가는 테이블 하나 CREATE문 작성해서 제출
    -> PRIMARY KEY : AUTO_INCREMENT 추가!
    
    MySQL
    - 데이터 타입
    1. 문자
		- CHAR / **VARCHAR** : 고정 및 가변 길이 문자, 반드시 크기 지정
        - **TEXT** : 매우 긴 문자열을 저장하는데 사용
	2. 숫자
		- **INT** : 정수 값 저장하는데 사용
        - FLOAT / DOUBLE : 부동소수점 저장하는데 사용
        - DECIMAL : 고정소수점 저장하는데 사용
	3. 날짜 및 시간
		- **DATE** : 날짜 저장하는데 사용
        - TIME : 시간 저장하는데 사용
        - **DATETIME** / TIMESTAMP : 날짜와 시간을 함께 저장 (DEFAULT NOW())
	4. 불리언
		- BOOLEAN / BOOL : 참(True) 또는 거짓(False) 값을 저장하는데 사용
	5. 이진 자료형
		- BLOB : 이진 데이터를 저장하는데 사용. 이미지나 동영상과 같은 이진 파일
        --> 실제로는 이미지나 동영상은 따로 관리 (url만 문자형으로 저장)
*/
CREATE TABLE employee(
	emp_no INT PRIMARY KEY AUTO_INCREMENT,
    emp_id VARCHAR(20) NOT NULL,
    emp_name VARCHAR(20) NOT NULL,
    dept_code char(3),
    phone VARCHAR(13),
    email VARCHAR(50),
    birth_date DATE NOT NULL,
    salary INT,
    bonus FLOAT,
    hire_date DATETIME DEFAULT NOW()
);
​
CREATE TABLE USER_INFO(
	USER_NO INT PRIMARY KEY AUTO_INCREMENT,
    ID VARCHAR(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR(300) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE,
    NAME VARCHAR(50) NOT NULL,
    PHONE VARCHAR(50) UNIQUE,
    ADDR VARCHAR(200),
    GENDER VARCHAR(10) CHECK (GENDER IN ('남', '여')),
    BIRTH_DATE DATE,
    HIRE_DATE DATE DEFAULT (CURRENT_DATE),
    QUIT_DATE DATE,
    DEPT_NO INT,
    GRADE_NO INT
);
SELECT * FROM USER_INFO;
UPDATE user_info SET email = 'ccc2240@naver.com' WHERE user_no = 3;
​
CREATE TABLE DEPARTMENT(
	DEPT_NO INT PRIMARY KEY AUTO_INCREMENT,
	DEPT_NAME VARCHAR(100) NOT NULL -- 개발팀
);
​
CREATE TABLE GRADE(
	GRADE_NO INT PRIMARY KEY AUTO_INCREMENT,
	GRADE_NAME VARCHAR(100) NOT NULL -- 사원
);
​
CREATE TABLE PROJECT(
	PRO_NO INT AUTO_INCREMENT PRIMARY KEY,
    PRO_NAME VARCHAR(100) NOT NULL,
    PRO_DESC TEXT,
    START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR(10) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단'))
);
​
CREATE TABLE PROJECT_MEMBERS(
	MEMBER_NO INT AUTO_INCREMENT PRIMARY KEY,
    USER_NO INT,
    PRO_NO INT,
    ROLE VARCHAR(50)
);
-- 프로젝트 : 업무들 = 1 : M
​
CREATE TABLE PROJECT_TASKS(
	TASK_NO INT AUTO_INCREMENT PRIMARY KEY,
    PRO_NO INT,
    TASK_NAME VARCHAR(100),
    TASK_DESC TEXT,
    STATUS VARCHAR(10) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단')),
    START_DATE DATE,
    END_DATE DATE
);
​
-- 일정 관리
CREATE TABLE SCHEDULE(
	SCHEDULE_NO INT AUTO_INCREMENT PRIMARY KEY, 
    SCHEDULE_TITLE VARCHAR(100) NOT NULL,
    SCHEDULE_DESC TEXT,
    START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR(30) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단')),
    LOCATION VARCHAR(200),
    PRO_NO INT,
    TASK_NO INT,
    USER_NO INT
);
​
CREATE TABLE SCHEDULE_MEMBERS(
	SCH_MEM_NO INT AUTO_INCREMENT PRIMARY KEY,
    USER_NO INT,
    SCHEDULE_NO INT
);
​
-- 고객관계관리
-- 고객마다 담당자가 지정된 상태
CREATE TABLE CUSTOMER(
	CUSTOMER_NO INT AUTO_INCREMENT PRIMARY KEY, 
    NAME VARCHAR(100) NOT NULL,
    PHONE VARCHAR(20),
    EMAIL VARCHAR(100),
    COMPANY VARCHAR(100),
    USER_NO INT
);
-- 고객과의 계약 정보
CREATE TABLE CONTRACT(
	CONTRACT_NO INT AUTO_INCREMENT PRIMARY KEY, 
    CUSTOMER_NO INT,
    TITLE VARCHAR(100) NOT NULL,
    CONTENT TEXT,
    PAY INT,
    START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR(30) CHECK(STATUS IN ('계약전', '진행중', '완료', '파기')),
    CREATE_DATE DATETIME DEFAULT (CURRENT_DATE)
);
-- 고객 불만
CREATE TABLE CUSTOMER_CLAIM(
	CLAIM_NO INT AUTO_INCREMENT PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    CONTENT TEXT,
    PHOTO_URL VARCHAR(200),
    STATUS VARCHAR(30) CHECK(STATUS IN ('제출', '해결중', '완료')),
    CREATE_DATE DATETIME DEFAULT (CURRENT_DATE),
    CUTOMER_NO INT
);
​
-- 인적자원관리 : 연차, 인사평가, 출퇴근
CREATE TABLE HRM_LEAVES(
	LEAVE_NO INT AUTO_INCREMENT PRIMARY KEY,
    START_DATE DATE,
    END_DATE DATE,
    REASON TEXT,
    STATUS VARCHAR(30) CHECK(STATUS IN ('신청', '승인', '반려')),
    CREATE_DATE DATETIME DEFAULT (CURRENT_DATE),
    USER_NO INT
);
​
CREATE TABLE HRM_EVALUATION(
	EVALUATE_NO INT AUTO_INCREMENT PRIMARY KEY,
    EVALUATE_DATE DATE,
    EVALUATE_ID INT, -- 평가자
    SCORE INT,
    COMMENT TEXT,
    USER_NO INT -- 평가 받는 사람
);
​
CREATE TABLE HRM_WORK(
	WORK_NO INT AUTO_INCREMENT PRIMARY KEY,
    WORK_START DATETIME DEFAULT (CURRENT_TIME),
    WORK_END DATETIME,
    STATUS VARCHAR(30) CHECK(STATUS IN ('정상', '지각', '결근', '조퇴', '휴가')),
    USER_NO INT
);
-- 재무관리
CREATE TABLE FINANCIAL_SALARY(
	SALARY_NO INT AUTO_INCREMENT PRIMARY KEY,
    SALARY_DATE DATE,
    BASE_SALARY INT,
    BONUS INT,
    DEDUCTION INT,
    TAX INT,
    USER_NO INT
);
CREATE TABLE FINANCIAL_BUDGET(
	BUDGET_NO INT AUTO_INCREMENT PRIMARY KEY,
    TARGET_SALES INT, -- 목표 매출
    ANNUAL_BUDGET INT NOT NULL, -- 매년 목표 예산
    ANNUAL_PLAN TEXT, -- 각 부서 별 예산 소진 계획
    ACHIVED VARCHAR(2) CHECK (ACHIVED IN ('T', 'F')),
    DEPT_NO INT
);
​
CREATE TABLE FINANCIAL_TRANSACTION(
	TRANS_NO INT AUTO_INCREMENT PRIMARY KEY, -- 지출 및 수입 내역
    TRANS_DESC TEXT NOT NULL, -- 지출 및 수입 내역 상세 정보
    TRANS_DATE DATE NOT NULL, -- 지출 및 수입 내역 발생 일자
    USER_NO INT
);
​
-- 품질보증관리
CREATE TABLE QUALITY(
	QUALITY_NO INT AUTO_INCREMENT PRIMARY KEY,
    ITEM_NAME VARCHAR(50) NOT NULL,
    STATUS VARCHAR(20) CHECK(STATUS IN ('정상', '불량', '조치필요')),
    USER_NO INT
);
​
-- 불량품 관리
CREATE TABLE DEFECT_ITEM(
	DEFECT_NO INT AUTO_INCREMENT PRIMARY KEY,
    QUALITY_NO INT,
    DEFECT_DESC TEXT, -- 문제내용
    RESOLUTION_DESC TEXT, -- 해결 내용
    RESOLUTION_DATE DATE,
    USER_NO INT
);
​
​
-- DEPT_NO, GRADE_NO
ALTER TABLE USER_INFO ADD 
FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENT(DEPT_NO);
ALTER TABLE USER_INFO ADD 
FOREIGN KEY (GRADE_NO) REFERENCES GRADE(GRADE_NO);
​
-- PROJECT_MEMBERS : USER_NO, PRO_NO
ALTER TABLE PROJECT_MEMBERS ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
ALTER TABLE PROJECT_MEMBERS ADD
FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
​
-- PROJECT_TASKS : PRO_NO
ALTER TABLE PROJECT_TASKS ADD
FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
​
-- SCHEDULE : PRO_NO, TASK_NO, USER_NO
ALTER TABLE SCHEDULE ADD
FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
ALTER TABLE SCHEDULE ADD
FOREIGN KEY (TASK_NO) REFERENCES PROJECT_TASKS(TASK_NO);
ALTER TABLE SCHEDULE ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- SCHEDULE_MEMBERS : SCHEDULE_NO
ALTER TABLE SCHEDULE_MEMBERS ADD
FOREIGN KEY (SCHEDULE_NO) REFERENCES SCHEDULE(SCHEDULE_NO);
​
-- CUSTOMER : USER_NO
ALTER TABLE CUSTOMER ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- CUSTOMER_CONTRACT : CUSTOMER_NO
ALTER TABLE CONTRACT ADD
FOREIGN KEY (CUSTOMER_NO) REFERENCES CUSTOMER(CUSTOMER_NO);
​
-- CUSTOMER_CLAIM : CUSTOMER_NO
ALTER TABLE CUSTOMER_CLAIM ADD
FOREIGN KEY (CUSTOMER_NO) REFERENCES CUSTOMER(CUSTOMER_NO);
​
​
-- HRM_LEAVES : USER_NO
ALTER TABLE HRM_LEAVES ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- HRM_EVALUATION : USER_NO
ALTER TABLE HRM_EVALUATION ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- HRM_WORK
ALTER TABLE HRM_WORK ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- FINANCIAL_SALARY : USER_NO
ALTER TABLE FINANCIAL_SALARY ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- FINANCIAL_BUDGET : DEPT_NO
ALTER TABLE FINANCIAL_BUDGET ADD
FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENT(DEPT_NO);
​
-- FINANCIAL_TRANSACTION : USER_NO
ALTER TABLE FINANCIAL_TRANSACTION ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- QUALITY : USER_NO
ALTER TABLE QUALITY ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- DEFECT_ITEM : USER_NO
ALTER TABLE DEFECT_ITEM ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
​
​
-- 프로젝트 관리 : 테이블 몇개든 상관없이 짜보고 FOREIGN KEY까지 걸어보는 것 까지
-- 테이블 필요한 컬럼 짜기 힘들다면 어떤 기능이 있어야 되는지 정도로 제출
​
-- CREATE TABLE PROJECT( -- 프로젝트 테이블
-- 	PROJECT_ID INT PRIMARY KEY AUTO_INCREMENT, -- PROJECT 고유키
--     PROJECT_NAME VARCHAR(100) NOT NULL, -- 프로젝트명
--     PROJECT_DETAIL VARCHAR(1000) NOT NULL, -- 프로젝트 내용
--     PROJECT_MANAGER INT, -- 프로젝트 담당자(FK)
--     START_DATE DATE, -- 프로젝트 시작일
--     END_DATE DATE, -- 프로젝트 종료일
--     PROJECT_STATUS VARCHAR(30) CHECK (PROJECT_STATUS IN ('PLANNING', 'IN', 'DONE', 'BREAK')), -- 프로젝트 진행 상황
--     CREATE_DATE DATETIME DEFAULT NOW(), -- 항목 생성일
--     UPDATE_DATE DATETIME -- 항목 수정일
-- );
​
-- ALTER TABLE PROJECT ADD
-- FOREIGN KEY (PROJECT_MANAGER) REFERENCES USER_INFO(USER_NO);
​
-- CREATE TABLE PROJECT_MEMBERS( -- 프로젝트 인원 테이블
-- 	PROJECT_MEMBER_ID INT PRIMARY KEY AUTO_INCREMENT, -- PROJECT_MEMBERS 고유키
--     PROJECT_ID INT, -- 프로젝트 ID(FK)
--     USER_NO INT, -- 유저 넘버(FK)
--     ROLE VARCHAR(50) NOT NULL, -- 역할
--     JOIN_DATE DATE DEFAULT (CURRENT_DATE), -- 프로젝트 참가일
--     OUT_DATE DATE -- 프로젝트 배제일
-- );
​
-- ALTER TABLE PROJECT_MEMBERS ADD
-- FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(PROJECT_ID);
-- ALTER TABLE PROJECT_MEMBERS ADD
-- FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- CREATE TABLE PROJECT_TASKS( -- 프로젝트 진행중인 작업 테이블
-- 	TASK_ID INT PRIMARY KEY AUTO_INCREMENT, -- PROJECT_TASKS 고유키
--     PROJECT_ID INT, -- 프로젝트 ID(FK)
--     TASK_NAME VARCHAR(100) NOT NULL, -- 작업 이름
--     TASK_DETAIL VARCHAR(1000) NOT NULL, -- 작업 내용
--     PRIORITY VARCHAR(30) CHECK (PROJECT_STATUS IN ('HIGH', 'MEDIUM', 'LOW')), -- 작업 우선 순위
--     TASK_STATUS VARCHAR(30) CHECK (PROJECT_STATUS IN ('IN', 'DONE')), -- 작업 진행 상황
-- 	START_DATE DATE DEFAULT (CURRENT_DATE), -- 작업 시작일
--     END_DATE DATE -- 작업 종료일
-- );
​
-- ALTER TABLE PROJECT_TASKS ADD
-- FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(PROJECT_ID);
​
​
-- 일정 관리
-- CREATE TABLE SCHEDULE(
-- 	SCHEDULE_NO INT AUTO_INCREMENT PRIMARY KEY, -- 일정 고유키
--     SCH_NAME VARCHAR(100), -- 일정 이름
--     SCH_DESC VARCHAR(1000), -- 일정 내용
--     LOCATION VARCHAR(200), -- 장소
--     SCH_TYPE VARCHAR(30), -- 일정 유형
--     STATUS VARCHAR(10) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단')), -- 일정 상태
--     START_DATE DATETIME, -- 일정 시작 일시
--     END_DATE DATETIME -- 일정 종료 일시
-- );
​
-- CREATE TABLE SCHEDULE_MEMBERS( -- 일정 참석자 테이블
-- 	SCH_MEM_NO INT AUTO_INCREMENT PRIMARY KEY, -- 일정 참석자 고유키
--     SCHEDULE_NO INT, -- 스케쥴 넘버(FK)
--     USER_NO INT -- 유저 넘버(FK)
-- );
​
-- ALTER TABLE SCHEDULE_MEMBERS ADD
-- FOREIGN KEY (SCHEDULE_NO) REFERENCES SCHEDULE(SCHEDULE_NO);
-- ALTER TABLE SCHEDULE_MEMBERS ADD
-- FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
​
-- CREATE TABLE SALARY( -- 월급 테이블
-- 	SALARY_NO INT AUTO_INCREMENT PRIMARY KEY,
--     USER_NO INT, -- 유저 넘버(FK)
--     BASE_SALARY INT, -- 기본급
--     BONUS INT, -- 보너스
--     DEDUCTION INT, -- 공재액
--     TAX INT, -- 세금
--     SALARY_DATE DATE -- 월급 지급 일
-- );
​
-- ALTER TABLE SALARY ADD
-- FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- CREATE TABLE ATTENDANCE( -- 근태 테이블
-- 	ATTEND_NO INT AUTO_INCREMENT PRIMARY KEY,
--     USER_NO INT, -- 유저 넘버(FK)
--     ATTEND_DATE DATE, -- 날짜
--     STATUS VARCHAR(10) CHECK (STATUS IN ('정상', '지각', '결근', '조퇴', '휴가')) -- 상태
-- );
​
-- ALTER TABLE ATTENDANCE ADD
-- FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
​
-- CREATE TABLE EVALUATION( -- 인사 평가 테이블
-- 	EVAULATE_NO INT AUTO_INCREMENT PRIMARY KEY,
--     USER_ID INT, -- 유저 넘버(FK)
--     SCORE INT, -- 평가 점수
--     EVAULATE_COMMENT TEXT, -- 평가 코멘트
--     EVAULATE_DATE DATE -- 평가일
-- );
​
-- ALTER TABLE EVALUATION ADD
-- FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);