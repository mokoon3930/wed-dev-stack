/*
	DB 모델링 
    1. 개념적 모델링
		- 엔티티(테이블) 추출
        - 엔티티 간의 관계설정
    2. 논리적 모델링
		- 속성(커럼) 추출
        - 정규화 (1, 2, 3) ----> 이 이상으로 가면 역 정규화
    3. 물리적 모델링
		- 테이블 실직적으로 작성(CREATE문 작성)
	
    * 정규화(Nomalization)
    - 불필요한 데이터의 중복을 제거하여 데이터 모델을 구조화 하는것
    - 효율적인 자료 저장 및 데이터 무결성을 보장 하고 오류를 최소화 하여 안정성을 보장하기 위해 적용함
    
		제 1 정규화 : 복수의 속성값을 갖는 속성을 분리
        제 2 정규화 : 주 식별자에 종속되지 않는 속성을 분리
        제 3 정규화 : 속성에 종속적인 속성을 제거
*/
/*
	사용자 or 사원 관련 정보 들어가는 테이블 하나 CREATE 문 작성해서 제출!
    -> PRIMARY KEY : AUTO_INCREMENT 추가!

    
    MySQL
    - 데이터 타입
    1. 문자
		- CHAR/ **VARCHAR** : 고정 및 가변길이 문자, 반드시 크기지정
        - TEXT : 매우긴 문자열을 저장 하는데 사용
	2. 숫자
		- **INT** : 정수값 저장하는데 사용
        - FLOAT/ DOUBLE : 부동 소수점 저장 하는데 사용
        - DECIMAL : 고정 소수점 저장하는데 사용
	3. 날짜 및 시간
		- **DATE** : 날짜 저장 하는데 사용
        - TIME : 시간 저장 하는데 사용
        - **DATETIME** / TIMESTAMP : 날짜와 시간을 함께 저장
	4. 불리언
		- BOOLEAN / BOOL : 참(TURE) 또는 거짓 (FALSE) 값을 저장하는데 사용
	5. 이진 자료형
		- BLOB : 이진 데이터를 저장하는데 사용, 이미지나 동영상과 같은 이진 파일
        --> 실제로는 이미지나 동영상을 따로 관리(URL만 문자형으로 저장)
*/
DROP TABLE USER_INFO;
DROP TABLE DEPARTMENT;
DROP TABLE PROJECT_TASKS;
DROP TABLE PROJECT_MEMBERS;
DROP TABLE PROJECT;
DROP TABLE SCHEDULE_MEMBERS;
DROP TABLE USER;

CREATE TABLE USER_INFO(
USER_NO INT PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) NOT NULL, 
EMAIL VARCHAR(100) UNIQUE,
USER_NAME VARCHAR(50) NOT NULL,
PHONE VARCHAR(50) UNIQUE,
ADDR VARCHAR(200),
GENDER VARCHAR(10) CHECK( GENDER IN ('남', '여')),
BIRTHDATE_DATE DATE,
HIRE_DATE DATE DEFAULT (CURRENT_DATE),
QUIT_DATE DATE,
DEPT_NO INT,
GRADE_NO INT
);
CREATE TABLE DEPARTMENT(
  DEPT_NO INT PRIMARY KEY AUTO_INCREMENT,
  DEPT_NAME VARCHAR(100) NOT NULL -- 개발팀
);
CREATE TABLE GRADE(
  GRADE_NO INT PRIMARY KEY AUTO_INCREMENT,
  GRADE_NAME VARCHAR(100) NOT NULL -- 사원
);
ALTER TABLE USER_INFO ADD
FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENT(DEPT_NO);
ALTER TABLE USER_INFO ADD
FOREIGN KEY (GRADE_NO) REFERENCES GRADE (GRADE_NO);

-- 프로젝트 관리 : 몇게든 상관없이 짜보시고 FOREING KEY 까지 걸어보기
-- 테이블 필요한 컬럼 짜기 힘들면 어떤기능이 있어야 되는지 제출해도 OK
 DROP TABLE PROJECT_MEMBERS;
 DROP TABLE USER_INFO;
DROP TABLE DEPARTMANT;
DROP TABLE GRADE;
DROP TABLE PROJET_TASKS;
DROP TABLE PROJECT;

CREATE TABLE BOSS(
BOSS_NO INT UNIQUE NOT NULL PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) UNIQUE NOT NULL,
BOSS_NAME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(100) UNIQUE NOT NULL,
PHONE VARCHAR(50) UNIQUE NOT NULL,
);
CREATE TABLE STAFF(
STAFF_NO INT PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) UNIQUE NOT NULL, 
EMAIL VARCHAR(100) UNIQUE,
STAFF_NAME VARCHAR(50) NOT NULL,
PHONE VARCHAR(50) UNIQUE,
GENDER VARCHAR(10) CHECK( GENDER IN ('남', '여')),
BIRTHDATE_DATE DATE,
HIRE_DATE DATE DEFAULT (CURRENT_DATE),
QUIT_DATE DATE,
DEPT_NO INT,
GRADE_NO INT
);
CREATE TABLE DEPARTMENT(
  DEPT_NO INT PRIMARY KEY AUTO_INCREMENT,
  DEPT_NAME VARCHAR(100) NOT NULL 
);
CREATE TABLE GRADE(
  GRADE_NO INT PRIMARY KEY AUTO_INCREMENT,
  GRADE_NAME VARCHAR(100) NOT NULL 
);
CREATE TABLE CONSUMER(
CONSUMER_NO INT PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) NOT NULL, 
EMAIL VARCHAR(100) UNIQUE,
CONSUMER_NAME VARCHAR(50) NOT NULL,
PHONE VARCHAR(50) UNIQUE,
ADDR VARCHAR(200),
GENDER VARCHAR(10) CHECK( GENDER IN ('남', '여')),
BIRTHDATE_DATE DATE,
HIRE_DATE DATE DEFAULT (CURRENT_DATE),
QUIT_DATE DATE
);
CREATE TABLE ITEM(
ITEM_NO INT PRIMARY KEY AUTO_INCREMENT,
ITEM_NAME VARCHAR(300) UNIQUE NOT NULL,
ADD INT,
REVIEW VARCHAR(500)
);
CREATE TABLE BOSS(
BOSS_NO INT UNIQUE NOT NULL PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) UNIQUE NOT NULL,
BOSS_NAME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(100) UNIQUE NOT NULL,
PHONE VARCHAR(50) UNIQUE NOT NULL,
);
CREATE TABLE STAFF(
STAFF_NO INT PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) UNIQUE NOT NULL,
EMAIL VARCHAR(100) UNIQUE,
STAFF_NAME VARCHAR(50) NOT NULL,
PHONE VARCHAR(50) UNIQUE,
GENDER VARCHAR(10) CHECK( GENDER IN ('남', '여')),
BIRTHDATE_DATE DATE,
HIRE_DATE DATE DEFAULT (CURRENT_DATE),
QUIT_DATE DATE,
DEPT_NO INT,
GRADE_NO INT
);
CREATE TABLE DEPARTMENT(
  DEPT_NO INT PRIMARY KEY AUTO_INCREMENT,
  DEPT_NAME VARCHAR(100) NOT NULL, 
  DEPT_COLOR VARCHAR(20)
);
CREATE TABLE GRADE(
  GRADE_NO INT PRIMARY KEY AUTO_INCREMENT,
  GRADE_NAME VARCHAR(100) NOT NULL -- 사원
);
CREATE TABLE CONSUMER(
CONSUMER_NO INT PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) NOT NULL,
EMAIL VARCHAR(100) UNIQUE,
CONSUMER_NAME VARCHAR(50) NOT NULL,
PHONE VARCHAR(50) UNIQUE,
ADDR VARCHAR(200),
GENDER VARCHAR(10) CHECK( GENDER IN ('남', '여')),
BIRTHDATE_DATE DATE,
HIRE_DATE DATE DEFAULT (CURRENT_DATE),
QUIT_DATE DATE
);
CREATE TABLE ITEM(
ITEM_NO INT PRIMARY KEY AUTO_INCREMENT,
ITEM_NAME VARCHAR(300) UNIQUE NOT NULL,
SIZE INT ,
ADD INT,
REVIEW VARCHAR(500)
);
CREATE TABLE POST(
POST_NO INT PRIMARY KEY AUTO_INCREMENT UNIQUE NOT NULL,
COMPANY_NO INT UNIQUE NOT NULL,
D_DATE DATE NOT NULL,
LOCATION VARCHAR(300) NOT NULL,
LOCATION_NO INT NOT NULL,
STATE VARCHAR(50) NOT NULL,
RETURN_NO INT
);
CREATE TABLE RETURN(
  RETURN_NO INT PRIMARY KEY AUTO_INCREMENT,
  ITEM_NAME VARCHAR(100) NOT NULL
);
CREATE TABLE COMPANY(
  COMPANY_NO INT PRIMARY KEY AUTO_INCREMENT,
  COMPANY_NAME VARCHAR(200) NOT NULL
);
ALTER TABLE POST ADD
FOREIGN KEY (RETURN_NO) REFERENCES RETURN(RETURN_NO);
ALTER TABLE POST ADD
FOREIGN KEY (COMPANY_NO) REFERENCES COMPANY (COMPANY_NO);




CREATE TABLE PROJECT (
  PRO_NO INT AUTO_INCREMENT PRIMARY KEY,
  PRO_NAME VARCHAR(100) NOT NULL,
  PRO_DESC TEXT,
  START_DATE DATE,
  END_DATE DATE,
  STATUS VARCHAR (10) CHECK(STATUS IN('진행 전', '진행 중', '완료', '중단'))
);
-- PROJECT_MEMBERS : USER_NO, PRO_NO
CREATE TABLE PROJECT_MEMBERS(
  MEMBER_NO INT AUTO_INCREMENT PRIMARY KEY,
  USER_NO INT,
  PRO_NO INT,
  ROLE VARCHAR(50)
);
-- 프로젝트 : 업무들 = 1 : M
-- PROJECT_TASKS : PRO_NO
CREATE TABLE PROJECT_TASKS(
  TASK_NO INT AUTO_INCREMENT PRIMARY KEY,
  PRO_NO INT,
  TASK_NAME VARCHAR(100),
  TASK_DESC TEXT,
  STATUS VARCHAR(30) CHECK(STATUS IN('진행 전', '진행 중', '완료', '중단')),
  START_DATE DATE,
  END_DATE DATE,
  PARENT_TASK_NO INT
);

-- PROJECT_MEMBERS : USER_NO, PRO_NO
ALTER TABLE PROJECT_MEMBERS ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
ALTER TABLE PROJECT_MEMBERS ADD
FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
-- PROJECT_TASKS : PRO_NO
ALTER TABLE PROJECT_TASKS ADD
FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);

-- 일정 관리!
CREATE TABLE SCHEDULE
SCHEDULE_NO INT AUTO_INCREMENT PRIMARY KEY,
PRO_NAME VARCHAR(100),
USER_NO INT,
PRO_NO INT,
START_DATE DATE NOT NULL,
END_DATE DATE NOT NULL,
USER_OFF VARCHAR(50),
ADD VARCHAR(300),
CHANGE VARCHAR (300),
OVER_DATE DATE,
OVER_WORK VARCHAR(300),
OVER_PAY INT,
LOCATION VARCHAR(100) NOT NULL,
JOB_PAY 


CREATE TABLE SCHEDULE(
  SCHEDULE_NO INT AUTO_INCREMENT PRIMARY KEY,
  SCHEDULE_TITLE VARCHAR(100) NOT NULL,
  SCHEDULE_DESC TEXT(100),
  START_DATE DATE,
  END_DATE DATE,
  STATUS VARCHAR(30) CHECK(STATUS IN('진행 전', '진행 중', '완료', '중단')),
  LOCATION VARCHAR(200),
  PRO_NO INT,
  TASK_NO INT,
  USER_NO INT
);
CREATE TABLE SCHEDULE_MEMBERS(
  SCH_MEM_NO INT AUTO_INCREMENT PRIMARY KEY,
  USER_NO INT,
  SCHEDULE_NO INT
);
-- SCHEFULE : PRO_NO, TASK_NO, USER_NO
ALTER TABLE SCHEDULE ADD`erp`
FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
ALTER TABLE SCHEDULE ADD
FOREIGN KEY (TASK_NO) REFERENCES PROJECT_TASKS(TASK_NO);
ALTER TABLE SCHEDULE ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
-- SCHEDULE_MEMBERS : SCHEDULE_NO
ALTER TABLE SCHEDULE_MEMBERS ADD
FOREIGN KEY (SCHEDULE_NO) REFERENCES SCHEDULE(SCHEDULE_NO);


-- 고객관계 관리, 인적자원관리, 재무관리, 품질보증 관리
-- 가장 해볼만하것 1개도 괜찮고 아이디어있으면 여러개 해도 무방 !

CREATE TABLE QUALITY (
QUALITY_NO INT AUTO_INCREMENT PRIMARY KEY,
QUALITY_MANAGER VARCHAR(30) UNIQUE NOT NULL, -- 품질 담당자
QUALITY_DATE DATE NOT NULL, -- 품질 기간
PRODUCT_NO INT, -- 생산 라인
PRODUCT_LOCAL VARCHAR(300) UNIQUE, -- 생산 지역
NOTE_AUT VARCHAR(100)UNIQUE NOT NULL, -- 인증 기관
NOTE_NO INT UNIQUE NOT NULL, -- 인증서 번호
NOTE_NAME VARCHAR(100), --인증 내용
NOTE_DATE DATE NOT NULL, -- 인증 기간
RETURN VARCHAR(300) -- 불량 내용
);













